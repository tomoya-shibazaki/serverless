service: elearning-subsystem
frameworkVersion: "2"
useDotenv: true
variablesResolutionMode: 20210326
provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  profile: sls

plugins:
  - serverless-pseudo-parameters
  - serverless-python-requirements
custom:
  defaultStage: dev
  secret: ${file(./config/secret/.secret.${opt:stage, self:custom.defaultStage}.yml)}

resources:
  Resources:
    # VPC Resource
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/24
        Tags:
          - { Key: Name, Value: Sub System VPC }
    PrivateSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.0.0/26
        AvailabilityZone: us-east-1a
        Tags:
          - { Key: Name, Value: Sub System Private A }
    PrivateSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.0.64/26
        AvailabilityZone: us-east-1b
        Tags:
          - { Key: Name, Value: Sub System Private B }
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Lambda Functions
        VpcId: !Ref VPC
        Tags:
          - Key: "Name"
            Value: "LambdaSecurityGroup"
    AuroraSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Aurora
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: 10.0.0.0/24
        Tags:
          - Key: "Name"
            Value: "AuroraSecurityGroup"
      DependsOn: VPC
    # RDS Resource
    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Sub System subnet group"
        DBSubnetGroupName: subsystemdb-subnet-group
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
    DBCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        DatabaseName: SubSystemDB
        Engine: aurora-mysql
        EngineVersion: "5.7.12"
        MasterUsername: ${self:custom.secret.USER_NAME}
        MasterUserPassword: ${self:custom.secret.PASSWORD}
        DBClusterParameterGroupName: !Ref DBClusterParameterGroup
        DBSubnetGroupName: !Ref DBSubnetGroup
        VpcSecurityGroupIds:
          - !Ref AuroraSecurityGroup
      DependsOn: DBSubnetGroup
    DBClusterParameterGroup:
      Type: AWS::RDS::DBClusterParameterGroup
      Properties:
        Description: A parameter group for aurora
        Family: aurora-mysql5.7
        Parameters:
          character_set_client: utf8mb4
          character_set_connection: utf8mb4
          character_set_database: utf8mb4
          character_set_results: utf8mb4
          character_set_server: utf8mb4
          time_zone: Asia/Tokyo
    DBInstance1:
      Type: AWS::RDS::DBInstance
      Properties:
        DBClusterIdentifier: !Ref DBCluster
        DBSubnetGroupName: !Ref DBSubnetGroup
        Engine: aurora-mysql
        EngineVersion: "5.7.12"
        DBInstanceClass: db.t3.medium
      DependsOn: DBCluster
    AuroraSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: SubSystem/aurora
        SecretString: '{"username":"${self:custom.secret.USER_NAME}", "password":"${self:custom.secret.PASSWORD}"}'
    SecretTargetAttachment:
      Type: AWS::SecretsManager::SecretTargetAttachment
      Properties:
        SecretId: !Ref AuroraSecret
        TargetId: !Ref DBCluster
        TargetType: "AWS::RDS::DBCluster"
      DependsOn: DBCluster
    ProxyRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: subsystem-proxy-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "rds.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Path: /
        Policies:
          - PolicyName: RdsProxyPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "secretsmanager:GetResourcePolicy"
                    - "secretsmanager:GetSecretValue"
                    - "secretsmanager:DescribeSecret"
                    - "secretsmanager:ListSecretVersionIds"
                  Resource:
                    - !Ref AuroraSecret
                - Effect: Allow
                  Action:
                    - "kms:Decrypt"
                  Resource: "arn:aws:kms:${self:provider.region}:#{AWS::AccountId}:key/*"
                  Condition:
                    StringEquals:
                      kms:ViaService: "secretsmanager.${self:provider.region}.amazonaws.com"
      DependsOn: AuroraSecret
    RDSProxy:
      Type: AWS::RDS::DBProxy
      Properties:
        DBProxyName: SubSystemAuroraProxy
        Auth:
          - SecretArn: !Ref AuroraSecret
        VpcSecurityGroupIds:
          - !Ref AuroraSecurityGroup
        VpcSubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
        EngineFamily: MYSQL
        RoleArn: !GetAtt ProxyRole.Arn
      DependsOn: AuroraSecret
    DBProxyTargetGroup:
      Type: AWS::RDS::DBProxyTargetGroup
      Properties:
        TargetGroupName: default
        DBProxyName: !Ref RDSProxy
        DBClusterIdentifiers:
          - !Ref DBCluster
      DependsOn: 
        - RDSProxy
        - DBInstance1
    # S3
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: subsystem-storage
# Lambda, API Gateway
functions:
  testFunc:
    name: test_func
    handler: src/handlers/test_func.handler
    environment:
      USER_NAME: ${env:USER_NAME}
      PASSWORD: ${env:PASSWORD}
      DB_NAME: ${env:DB_NAME}
      RDS_HOST: ${env:RDS_HOST} # Proxy
    description: "Test Connest"
    vpc:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
    events:
      - http:
          path: /test
          method: post
          cors:
            origin: '*'
# VPC Lambda から S3 へ接続するためには VPC Endpoint を設定する必要がある。
# https://aws.amazon.com/blogs/aws/new-vpc-endpoint-for-amazon-s3/
  testFunc2:
    name: test_func2
    handler: src/handlers/test_func2.handler
    description: "Test Connest2"
    vpc:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
    events:
      - http:
          path: /test2
          method: post
          cors:
            origin: '*'